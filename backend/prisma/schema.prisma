// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  username     String?
  name         String?
  avatar       String?
  refreshToken String?
  accessToken  String?
  googleId     String?
  googleToken  String?
  channelId    String?
  channel      Channel?
  comment      Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Subscription Subscription[]
}

model Channel {
  id            String         @id @default(uuid())
  userId        String         @unique
  email         String
  title         String
  description   String?
  avatar        String?
  coverImage    String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  videos        Video[]
  user          User           @relation(fields: [userId], references: [id])
  subscriptions Subscription[]
}

model Video {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  description String?
  thumbnail   String?
  video_file  String?
  url         String?
  views       Int?      @default(0)
  likes       Int?      @default(0)
  duration    String?
  isPublished Boolean   @default(false)
  userId      String
  channelId   String
  channel     Channel   @relation(fields: [channelId], references: [id])
  comments    Comment[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subscription {
  id         Int      @id @default(autoincrement())
  userId     String
  channelId  String
  subscriber User     @relation(fields: [userId], references: [id])
  channel    Channel  @relation(fields: [channelId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WatchHistory {
  id        Int      @id @default(autoincrement())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid()) @map("Id")
  text      String
  userId    String
  videoId   String
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
